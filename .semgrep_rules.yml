rules:
# ───────────────────── 1. SSRF (ERROR) ─────────────────────
- id: ssrf-node
  message: "Возможен SSRF – пользователь формирует URL запроса"
  severity: ERROR
  languages: [js, ts]
  patterns:
    - pattern-either:
        # request / axios / fetch
        - pattern: request.get($URL)
        - pattern: request.$FUNC($URL)           # .post / .head …
        - pattern: axios($URL, ...)
        - pattern: fetch($URL, ...)
    # URL‑строка пришла из запроса (req.body / query / params)
    - metavariable-pattern:
        metavariable: $URL
        pattern: $REQ.$_
    # нет белого списка
    - pattern-not-inside: |
        if ($URL.startsWith("https://api.my-corp.local")) { ... }

# ───────────────────── 2. DOM‑XSS (INFO) ───────────────────
- id: dom-xss-assign
  message: "DOM‑XSS: присвоение innerHTML из непроверенных данных"
  severity: INFO
  languages: [js, ts]
  patterns:
    - pattern-either:
        - pattern: $EL.innerHTML = $PAYLOAD
        - pattern: $SAN.bypassSecurityTrustHtml($PAYLOAD)
    - metavariable-pattern:
        metavariable: $PAYLOAD
        pattern: $REQ.$_
    - pattern-not-inside: |
        DOMPurify.sanitize(...)
        # позволяем Purify или Angular sanitizer без bypass

# ─── 3. Null‑byte обход проверок путей (INFO) ──────────────
- id: null-byte-path
  message: "Null‑byte в пути из пользовательского ввода (обход проверок FS)"
  severity: INFO
  languages: [js, ts]
  patterns:
    # Любой вызов fs.* с path‑переменной
    - pattern-either:
        - pattern: fs.$FUNC($PATH, ...)
        - pattern: path.join(..., $PATH)
        - pattern: path.resolve(..., $PATH)
    # $PATH пришёл из запроса
    - metavariable-pattern:
        metavariable: $PATH
        pattern: $REQ.$_
    # нет проверки на ‘\0’
    - pattern-not-inside: |
        if ($PATH.includes("\0")) { ... }

# ─── 4. SSTI через eval / EJS (INFO) ───────────────────────
- id: ssti-node
  message: "SSTI: шаблон формируется напрямую из запроса"
  severity: INFO
  languages: [js, ts]
  patterns:
    # unsafe ejs
    - pattern-either:
        - pattern: |
            const $TPL = $REQ.$_;
            ejs.render($TPL, ...)
        # unsafe eval(template)
        - pattern: |
            const $CODE = $REQ.$_;
            eval($CODE)

# ─── 5. Open /admin без middleware (INFO) ──────────────────
- id: bac-open-admin-route
  message: "Открытый admin‑роут без проверок доступа"
  severity: INFO
  languages: [js, ts]
  pattern: |
    app.get('/admin', $HANDLER)
  pattern-not-inside: |
    app.get('/admin', verify* , $REST*)

