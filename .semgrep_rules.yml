rules:
# ────────────────────────────────────────────────────────────────
#  🚨 1. Блокирующая проверка (SSR F) — уже есть выше
# ────────────────────────────────────────────────────────────────
  - id: ssrf-node
    pattern-either:
      - pattern: axios("http://$URL")
      - pattern: fetch("http://$URL")
      - pattern: request.get($URL)
    message: "Возможен SSRF – пользователь формирует URL запроса"
    languages: [js, ts]
    severity: ERROR

# ────────────────────────────────────────────────────────────────
#  ℹ️ 2. Server‑Side Template Injection (Pug/EJS/Handlebars)
#       (только если template приходит из req/query/body)
# ────────────────────────────────────────────────────────────────
  - id: ssti-node
    patterns:
      - pattern: |
          const $TPL = $REQ.$_;
      - pattern: |
          ejs.render($TPL, ...)
    message: "SSTI: шаблон для EJS формируется напрямую из запроса"
    languages: [js, ts]
    severity: INFO


# ────────────────────────────────────────────────────────────────
#  ℹ️ 3. DOM‑XSS (обновили — ловим прямую вставку во «взрывоопасные» API)
# ────────────────────────────────────────────────────────────────
  - id: dom-xss-assign
    patterns:
      - pattern: $EL.innerHTML = $USR
      - pattern-not: $EL.innerHTML = DOMPurify.sanitize($USR)
    message: "DOM‑XSS: присвоение innerHTML из непроверенных данных"
    languages: [js, ts]
    severity: INFO

# ────────────────────────────────────────────────────────────────
#  ℹ️ 4. NULL‑byte path trick (Node FS / path APIs)
#       ловим '\0' в пути, который пришёл от юзера
# ────────────────────────────────────────────────────────────────
  - id: null-byte-path
    patterns:                             # один массив patterns
      # ① сама операция с fs.*
      - pattern: |
          fs.$FUNC($PATH, ...)
      # ② $PATH пришёл из запроса (req.* / query / params / body)
      - metavariable-pattern:
          metavariable: $PATH
          pattern: $REQ.$_
      # ③ …и при этом раньше не делали защитную проверку includes('\0')
      - pattern-not-inside: |
          if ($PATH.includes("\0")) { ... }
    message: "Null‑byte в пути из пользовательского ввода (обход проверок FS)"
    languages: [js, ts]
    severity: INFO

# ────────────────────────────────────────────────────────────────
#  ℹ️ 5. Broken Access Control — открытый /admin без auth‑middleware
# ────────────────────────────────────────────────────────────────
  - id: bac-open-admin-route
    patterns:
      # сам уязвимый маршрут
      - pattern: |
          app.get("/admin", $HANDLER)
      # отсутствует промежуточная проверка (‘auth’, ‘verify’, ‘token’, …)
      - pattern-not-inside: |
          app.get("/admin", $AUTH, $HANDLER)
    message: "Broken Access Control: /admin доступен без проверки авторизации"
    languages: [js, ts]
    severity: INFO
