rules:
# ────────────────────────
# 1️⃣   SSRF – блокируем
# ────────────────────────
- id: ssrf-node
  message: Возможен SSRF – пользователь формирует URL запроса
  severity: ERROR            # ← build упадёт
  languages: [js, ts]
  pattern-either:
    - pattern: axios("$URL")
    - pattern: fetch("$URL")
    - pattern: request.get($URL)

# ──────────────────────────────
# 2️⃣   DOM‑XSS – только совет
# ──────────────────────────────
- id: dom-xss-assign
  message: DOM‑XSS: присвоение innerHTML из непроверенных данных
  severity: WARNING          # ← теперь НЕ блокирует build
  languages: [js, ts]
  patterns:
    - pattern: $ELE.innerHTML = $EXPR
    # не триггерим, если в коде уже вызывают DomPurify/Angular‑Sanitizer
    - pattern-not-inside: |
        DOMPurify.sanitize(...)
    - pattern-not-inside: |
        $SAN.bypassSecurityTrustHtml(...)

# ──────────────────────────────
# 3️⃣   Null‑byte – только совет
# ──────────────────────────────
- id: null-byte-path
  message: Null‑byte в пути из пользовательского ввода (обход проверок FS)
  severity: WARNING
  languages: [js, ts]
  patterns:
    # any fs.*(<user‑controlled‑path>, …)
    - pattern: fs.$FUNC($PATH, ...)
    # исключаем константные строки
    - pattern-not-regex: '"[^"]*"'
    # исключаем случаи, когда уже проверяют «\0»
    - pattern-not-inside: |
        if ($PATH.includes("\0")) { ... }

# ──────────────────────────────
# 4️⃣   SSTI – только совет
# ──────────────────────────────
- id: ssti-node
  message: Возможна SSTI через подмену шаблона
  severity: WARNING
  languages: [js, ts]
  patterns:
    - pattern: |
        const $tpl = $REQ.$_;
        ejs.render($tpl, $ANY*)

# ──────────────────────────────
# 5️⃣   Broken Access Control – совет
# ──────────────────────────────
- id: bac-open-admin-route
  message: Открытый admin‑роут без проверок доступа
  severity: WARNING
  languages: [js, ts]
  patterns:
    - pattern: |
        app.get('/admin', $HANDLER)
    - pattern-not-inside: |
        app.get('/admin', verify, ...)
