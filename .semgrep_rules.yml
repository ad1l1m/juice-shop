rules:
# ───────────────────── 1. SSRF (ERROR) ─────────────────────
  - id: ssrf
    severity: ERROR
    languages:
      - csharp
    metadata:
      cwe:
        - "CWE-918: Server-Side Request Forgery (SSRF)"
      owasp:
        - A10:2021 - Server-Side Request Forgery (SSRF)
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
      category: security
      technology:
        - .net
      confidence: LOW
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - audit
      likelihood: LOW
      impact: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Server-Side Request Forgery (SSRF)
    message: SSRF is an attack vector that abuses an application to interact with
      the internal/external network or the machine itself.
    patterns:
      - pattern-inside: |
          using RestSharp;
          ...
      - pattern-either:
          - pattern: |
              $T $F(..., $X, ...)
              {
              ...
              ... new RestClient(<... $X ...>);
              }
          - pattern: |
              $T $F(..., $X, ...)
              {
              ...
              $A $B = <... $X ...>;
              ...
              ... new RestClient($B);
              }

# ─── 2. DOM‑XSS: присвоение innerHTML без санитайзера ───
  - id: dom-xss-assign
    message: "DOM‑XSS: присвоение innerHTML из непроверенных данных"
    severity: INFO
    languages: [js, ts]

    patterns:
      # 1) опасное присвоение
      - pattern: |
          $EL.innerHTML = $DATA

      # 2) но НЕ триггерим, если данные проходят через DOMPurify
      - pattern-not-inside: |
          $EL.innerHTML = DOMPurify.sanitize(...)


  # ─── 3. Null‑byte обход проверок путей (INFO) ──────────────
  - id: null-byte-path
    message: "Null‑byte в пути из пользовательского ввода (обход проверок FS)"
    severity: INFO
    languages: [js, ts]
    patterns:
      # Любой вызов fs.* с path‑переменной
      - pattern-either:
          - pattern: fs.$FUNC($PATH, ...)
          - pattern: path.join(..., $PATH)
          - pattern: path.resolve(..., $PATH)
      # $PATH пришёл из запроса
      - metavariable-pattern:
          metavariable: $PATH
          pattern: $REQ.$_
      # нет проверки на ‘\0’
      - pattern-not-inside: |
          if ($PATH.includes("\0")) { ... }

  # ─── 4. SSTI через eval / EJS (INFO) ───────────────────────
  - id: ssti-node
    message: "SSTI: шаблон формируется напрямую из запроса"
    severity: INFO
    languages: [js, ts]
    patterns:
      # unsafe ejs
      - pattern-either:
          - pattern: |
              const $TPL = $REQ.$_;
              ejs.render($TPL, ...)
          # unsafe eval(template)
          - pattern: |
              const $CODE = $REQ.$_;
              eval($CODE)

  # ─── 5. Open /admin без middleware (INFO) ──────────────────
  # ─── 5. Broken‑Access‑Control: открытый /admin без middleware ───
  # ──────────────────────────────────
  # Broken Access Control (open /admin)
  # ──────────────────────────────────
  - id: bac-open-admin-route
    message: "Открытый admin‑роут без проверок доступа"
    severity: INFO
    languages: [js, ts]

    patterns:
      # 1️⃣ что мы хотим найти
      - pattern: |
          app.get('/admin', $HANDLER)

      # 2️⃣ когда ⚠️ НЕ нужно срабатывать
      - pattern-not-inside: |
          app.get('/admin', verify, ...)
